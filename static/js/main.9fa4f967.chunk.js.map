{"version":3,"sources":["components/Buttons.jsx","components/Statistics.jsx","components/Section.jsx","components/Notification.jsx","App.js","serviceWorker.js","index.js","styles/Components.module.css"],"names":["Buttons","options","onLeaveFeedback","map","option","key","onClick","id","toUpperCase","Statistics","good","neutral","bad","total","positivePercentage","className","style","statContainer","Math","round","Section","children","Notification","App","state","e","setState","Object","keys","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wPAGe,SAASA,EAAT,GAAgD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACzC,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAQE,QAAS,kBAAMJ,EAAgBE,IAASG,GAAIH,GAC9DA,EAAOI,mB,oBCJH,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC9D,OACE,yBAAKC,UAAWC,IAAMC,eACpB,0CACA,4BACE,4BACE,sCAAYP,IAEd,4BACE,yCAAeC,IAEjB,4BACE,qCAAWC,IAEb,4BACE,uCAAaC,IAEf,4BACE,mDACqBC,EAAqBI,KAAKC,MAAML,GAAsB,IAD3E,QCpBK,SAASM,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAChC,OAAO,iCAAUA,GCDJ,SAASC,IACtB,OAAO,iD,ICGYC,E,4MACnBC,MAAQ,CAAEd,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCV,gBAAkB,SAACuB,GACP,SAANA,GACF,EAAKC,SAAL,eAAiBD,EAAI,EAAKD,MAAMd,KAAO,IAE/B,YAANe,GACF,EAAKC,SAAL,eAAiBD,EAAI,EAAKD,MAAMb,QAAU,IAElC,QAANc,GACF,EAAKC,SAAL,eAAiBD,EAAI,EAAKD,MAAMZ,IAAM,K,uDAIxC,IAAMX,EAAU0B,OAAOC,KAAKC,KAAKL,OAD1B,EAEwBK,KAAKL,MAA5Bd,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IACjBC,EAAQH,EAAOC,EAAUC,EACzBE,EAAsBJ,EAAOG,EAAS,IAE5C,OACE,yBAAKE,UAAU,qBACb,qDAEA,kBAACK,EAAD,KACE,kBAACpB,EAAD,CAASC,QAASA,EAASC,gBAAiB2B,KAAK3B,kBAEtC,IAAVW,EACC,kBAACS,EAAD,MAEA,kBAACb,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,U,GAnCDgB,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,cAAgB,oC","file":"static/js/main.9fa4f967.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Buttons({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map((option) => (\n        <button key={option} onClick={() => onLeaveFeedback(option)} id={option}>\n          {option.toUpperCase()}\n        </button>\n      ))}\n    </div>\n  );\n}\nButtons.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func,\n};\n","import React from 'react';\nimport style from '../styles/Components.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div className={style.statContainer}>\n      <h2>Statistics</h2>\n      <ul>\n        <li>\n          <span>Good:{good}</span>\n        </li>\n        <li>\n          <span>Neutral:{neutral}</span>\n        </li>\n        <li>\n          <span>Bad:{bad}</span>\n        </li>\n        <li>\n          <span>Total:{total}</span>\n        </li>\n        <li>\n          <span>\n            Positive Feedback:{positivePercentage ? Math.round(positivePercentage) : '0'}%\n          </span>\n        </li>\n      </ul>\n    </div>\n  );\n}\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neurtal: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nexport default function Section({ children }) {\n  return <section>{children}</section>;\n}\nSection.propTypes = { children: PropTypes.array };\n","import React from \"react\";\n\nexport default function Notification() {\n  return <h2>No feedback given</h2>;\n}\n","import React, { Component } from \"react\";\nimport Buttons from \"./components/Buttons.jsx\";\nimport Statistics from \"./components/Statistics.jsx\";\nimport Section from \"./components/Section.jsx\";\nimport Notification from \"./components/Notification.jsx\";\n\nexport default class App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  onLeaveFeedback = (e) => {\n    if (e === \"good\") {\n      this.setState({ [e]: this.state.good + 1 });\n    }\n    if (e === \"neutral\") {\n      this.setState({ [e]: this.state.neutral + 1 });\n    }\n    if (e === \"bad\") {\n      this.setState({ [e]: this.state.bad + 1 });\n    }\n  };\n  render() {\n    const options = Object.keys(this.state);\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    const positivePercentage = (good / total) * 100;\n\n    return (\n      <div className=\"feedBackContainer\">\n        <h2>Please leave feedback</h2>\n\n        <Section>\n          <Buttons options={options} onLeaveFeedback={this.onLeaveFeedback} />\n\n          {total === 0 ? (\n            <Notification />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statContainer\":\"Components_statContainer__PZluf\"};"],"sourceRoot":""}